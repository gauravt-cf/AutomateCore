{
    "basicUsage": {
      "title": "üöÄ Basic Scheduler Usage",
      "language": "csharp",
      "code": "var scheduler = new SchedulerEngine(() => Console.WriteLine(\"Hello World\"));\nscheduler.Start();"
    },
    "withCallbacks": {
      "title": "üîÅ Scheduler with Callbacks",
      "language": "csharp",
      "code": "// Callbacks example\nvoid NotifyServiceStarted(DateTime t) => Console.WriteLine($\"‚úÖ Started at {t}\");"
    },
    "basicUsageWithLifeCycleCallbacks":{
      "title": "üßë‚Äçüíª Lifecycle Callbacks",
      "language": "csharp",
      "code": "private ISchedulerEngine _scheduler;

void RunTask() => Console.WriteLine("Running scheduled task...");

void NotifyServiceStarted(DateTime t) => Console.WriteLine($"‚úÖ Started at {t}");
void NotifyServiceCompleted(DateTime t) => Console.WriteLine($"‚úÖ Completed at {t}");
void NotifyServiceSkipped(string reason, DateTime t) => Console.WriteLine($"‚ö†Ô∏è Skipped ‚Äî {reason}");
void NotifyServiceFailed(Exception ex, DateTime t) => Console.WriteLine($"‚ùå Failed ‚Äî {ex.Message}");

_scheduler = new SchedulerEngine(
    RunTask,
    onTaskStarted: NotifyServiceStarted,
    onTaskCompleted: NotifyServiceCompleted,
    onTaskSkipped: NotifyServiceSkipped,
    onTaskFailed: NotifyServiceFailed
);"
    }
 }
  
