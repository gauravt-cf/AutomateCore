{
    "basicUsage": {
      "title": "üöÄ Basic Scheduler Usage",
      "language": "csharp",
      "code": "using System;\nusing AutomateCore;\n\nclass Program\n{\n    private ISchedulerEngine _scheduler;\n    static void Main()\n    {\n        // Core task logic\n        void RunTask() => Console.WriteLine($\"Task executed at {DateTime.Now}\");\n\n        // Initialize and start the scheduler\n        _scheduler = new SchedulerEngine(RunTask);\n        scheduler.Start();\n\n        Console.WriteLine(\"Scheduler started. Press any key to exit...\");\n        Console.ReadKey();\n\n        scheduler.Stop();\n    }\n}"
    },
    "withCallbacks": {
      "title": "üîÅ Scheduler with Callbacks",
      "language": "csharp",
      "code": "// Callbacks example\nvoid NotifyServiceStarted(DateTime t) => Console.WriteLine($\"‚úÖ Started at {t}\");"
    },
    "basicUsageWithLifeCycleCallbacks":{
      "title": "üßë‚Äçüíª Lifecycle Callbacks",
      "language": "csharp",
      "code": "using System;\
using AutomateCore;\
class Program\
{\
    private static ISchedulerEngine _scheduler;\
    static void Main(string[] args)\
    {\
        Console.WriteLine(\"üöÄ AutomateCore Scheduler is starting...\");\
        // Define the job to be scheduled\
        void RunTask()\
        {\
            Console.WriteLine($\"‚è∞ Task executed at {DateTime.Now}\");\
        }\
        // Lifecycle callbacks\
        void NotifyStarted(DateTime t) => Console.WriteLine($\"‚úÖ Task started at {t}\");\
        void NotifyCompleted(DateTime t) => Console.WriteLine($\"‚úÖ Task completed at {t}\");\
        void NotifySkipped(string reason, DateTime t) => Console.WriteLine($\"‚ö†Ô∏è Task skipped at {t} ‚Äî Reason: {reason}\");\
        void NotifyFailed(Exception ex, DateTime t) => Console.WriteLine($\"‚ùå Task failed at {t} ‚Äî {ex.Message}\");\
        // Initialize the scheduler\
        _scheduler = new SchedulerEngine(\
            RunTask,\
            onTaskStarted: NotifyStarted,\
            onTaskCompleted: NotifyCompleted,\
            onTaskSkipped: NotifySkipped,\
            onTaskFailed: NotifyFailed\
        );\
        // Start scheduling (blocking call)\
        _scheduler.Start();\
        Console.WriteLine(\"‚õî Press any key to exit...\");\
        Console.ReadKey();\
        _scheduler.Stop();\
    }\
}\
"
    }
 }
  
