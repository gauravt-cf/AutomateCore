{
  "basicUsage": {
    "title": "üöÄ Basic Scheduler Usage",
    "language": "csharp",
    "code": "using System;\nusing AutomateCore;\n\nclass Program\n{\n    private static ISchedulerEngine _scheduler;\n    static void Main()\n    {\n        // Core task logic\n        void RunTask() => Console.WriteLine($\"Task executed at {DateTime.Now}\");\n\n        // Initialize and start the scheduler\n        _scheduler = new SchedulerEngine(RunTask);\n        _scheduler.Start();\n\n        Console.WriteLine(\"Scheduler started. Press any key to exit...\");\n        Console.ReadKey();\n\n        _scheduler.Stop();\n    }\n}"
  },
  "withCallbacks": {
    "title": "üîÅ Scheduler with Callbacks",
    "language": "csharp",
    "code": "// Callbacks example\nvoid NotifyServiceStarted(DateTime t) => Console.WriteLine($\"‚úÖ Started at {t}\");"
  },
  "basicUsageWithLifeCycleCallbacks": {
    "title": "üßë‚Äçüíª Lifecycle Callbacks",
    "language": "csharp",
    "code": "using System;\nusing AutomateCore;\n\nclass Program\n{\n    private static ISchedulerEngine _scheduler;\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"üöÄ AutomateCore Scheduler is starting...\");\n\n        // Define the job to be scheduled\n        void RunTask()\n        {\n            Console.WriteLine($\"‚è∞ Task executed at {DateTime.Now}\");\n        }\n\n        // Lifecycle callbacks\n        void NotifyStarted(DateTime t) => Console.WriteLine($\"‚úÖ Task started at {t}\");\n        void NotifyCompleted(DateTime t) => Console.WriteLine($\"‚úÖ Task completed at {t}\");\n        void NotifySkipped(string reason, DateTime t) => Console.WriteLine($\"‚ö†Ô∏è Task skipped at {t} ‚Äî Reason: {reason}\");\n        void NotifyFailed(Exception ex, DateTime t) => Console.WriteLine($\"‚ùå Task failed at {t} ‚Äî {ex.Message}\");\n\n        // Initialize the scheduler\n        _scheduler = new SchedulerEngine(\n            RunTask,\n            onTaskStarted: NotifyStarted,\n            onTaskCompleted: NotifyCompleted,\n            onTaskSkipped: NotifySkipped,\n            onTaskFailed: NotifyFailed\n        );\n\n        // Start scheduling (blocking call)\n        _scheduler.Start();\n\n        Console.WriteLine(\"‚õî Press any key to exit...\");\n        Console.ReadKey();\n        _scheduler.Stop();\n    }\n}"
  },
  "xmlConfiguration": {
    "title": "‚öôÔ∏è XML Configuration",
    "language": "xml",
    "code": "<configuration>\n  <configSections>\n    <section name=\"schedulerSettings\" type=\"AutomateCore.Configuration.SchedulerConfigSection, AutomateCore\" requirePermission=\"false\" />\n  </configSections>\n\n  <schedulerSettings>\n    <add scheduleType=\"Hourly\" enabled=\"true\" hour=\"0\" minute=\"0\" />\n  </schedulerSettings>\n</configuration>"
  },
 "DryRunModeSettingExample": {
  "title": "Dry Run Mode Configuration Example",
  "language": "xml",
  "code": "<schedulerSettings>\n\t<add scheduleType=\"Every2Hours\" enabled=\"true\" hour=\"0\" minute=\"0\" dayOfWeek=\"\" dayOfMonth=\"0\" dryRun=\"true\"/>\n</schedulerSettings>"
},
  "xmlConfigurationAttributes": {
  "title": "üß© XML Configuration Attributes",
  "attributes": [
    {
      "name": "scheduleType",
      "description": "Immediate, Daily, Weekly, Monthly, etc."
    },
    {
      "name": "enabled",
      "description": "true / false"
    },
    {
      "name": "hour",
      "description": "Hour value"
    },
    {
      "name": "minute",
      "description": "Minute value"
    },
    {
      "name": "dayOfWeek",
      "description": "Applicable for Weekly"
    },
    {
      "name": "dayOfMonth",
      "description": "Applicable for Monthly"
    }
  ]
 }
}
